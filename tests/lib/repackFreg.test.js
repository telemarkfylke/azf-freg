const repackFreg = require('../../lib/repackFreg')

// What to test
const personMedBostedsdresse = require('../data/testpersons/personMedBostedsadresse.json')
const personMedPostdresseOgBostedsadresse = require('../data/testpersons/personMedPostadresseOgBostedsadresse.json')
const personMedPostdresseFrittFormat = require('../data/testpersons/personMedPostadresseFrittFormat.json')
const personMedAdressebeskyttelse = require('../data/testpersons/personMedAddressebeskyttelse.json') // denne har strengt fortrolig adresse
const personMedFortroligbeskyttelse = require('../data/testpersons/personMedFortroligbeskyttelse.json')
const personMedOppholdsadresseKlientadresse = require('../data/testpersons/personMedOppholdsadresseKlientadresse.json')
const personMedUtenlandskAdresse = require('../data/testpersons/personMedUtenlandskadresse.json')
const personMedForeldreansvar = require('../data/testpersons/personMedForeldreansvar.json')

describe('Adresser blir repacked som forventet når', () => {
  test('Person har bostedadresse, og ikke postadresse', () => {
    const repacked = repackFreg(personMedBostedsdresse)
    expect(repacked.bostedsadresse.gateadresse).toBe('Skipavika 88')
    expect(repacked.bostedsadresse.poststed).toBe('NORDSTRØNO')
    expect(repacked.bostedsadresse.postnummer).toBe('5218')
    expect(repacked.bostedsadresse.adressegradering).toBe('ugradert')
    expect(repacked.postadresse.gateadresse).toBe(repacked.bostedsadresse.gateadresse)
    expect(repacked.postadresse.poststed).toBe(repacked.bostedsadresse.poststed)
    expect(repacked.postadresse.postnummer).toBe(repacked.bostedsadresse.postnummer)
  })
  test('Person har postadresse og bostedsadresse med husbokstav, og postadresse i utlandet', () => {
    const repacked = repackFreg(personMedPostdresseOgBostedsadresse)
    expect(repacked.bostedsadresse.gateadresse).toBe('Skolegata 30B')
    expect(repacked.bostedsadresse.poststed).toBe('STRØMMEN')
    expect(repacked.bostedsadresse.postnummer).toBe('2010')
    expect(repacked.bostedsadresse.adressegradering).toBe('ugradert')
    expect(repacked.postadresse.gateadresse).toBe('Skravlete Kabin, Test 221')
    expect(repacked.postadresse.poststed).toBe('TRANØY')
    expect(repacked.postadresse.postnummer).toBe('8297')
    expect(repacked.postadresse.adressegradering).toBe('ugradert')
    expect(repacked.postadresseIUtlandet.gateadresse).toBe('Testadresselinje 1, Testadresselinje 2')
    expect(repacked.postadresseIUtlandet.poststed).toBe('Litt testby- eller stedsnavn')
    expect(repacked.postadresseIUtlandet.postnummer).toBe('Testpostkode utland 55')
    expect(repacked.postadresseIUtlandet.landkode).toBe('CV')
    expect(repacked.postadresseIUtlandet.adressegradering).toBe('ugradert')
  })
  test('Person har postadresse i fritt format', () => {
    const repacked = repackFreg(personMedPostdresseFrittFormat)
    expect(repacked.postadresse.gateadresse).toBe('POSTBOKS 146 BLEIE')
    expect(repacked.postadresse.poststed).toBe('GUGGENHEIM')
    expect(repacked.postadresse.postnummer).toBe('3222')
    expect(repacked.postadresseIUtlandet.adressegradering).toBe('ugradert')
  })
  test('Person har utenlandsk adresse (ikke i fritt format)', () => {
    const repacked = repackFreg(personMedUtenlandskAdresse)
    expect(repacked.postadresseIUtlandet.gateadresse).toBe('Erik Nilsson, Gatan 10')
    expect(repacked.postadresseIUtlandet.poststed).toBe('Gothenburg, Västre Götaland')
    expect(repacked.postadresseIUtlandet.postnummer).toBe('SE-412 50')
    expect(repacked.postadresseIUtlandet.landkode).toBe('SE')
    expect(repacked.postadresseIUtlandet.adressegradering).toBe('ugradert')
  })
  test('Person har adressebeskyttelse strengtFortrolig', () => {
    const repacked = repackFreg(personMedAdressebeskyttelse)
    expect(repacked.bostedsadresse).toBe(null)
    expect(repacked.postadresse.gateadresse).toBe('SOT 6, Postboks 2094 Vika')
    expect(repacked.postadresse.poststed).toBe('OSLO')
    expect(repacked.postadresse.postnummer).toBe('0125')
    expect(repacked.postadresse.adressegradering).toBe('ugradert')
  })
  test('Person har adressebeskyttelse fortrolig - uten option "includeFortrolig"', () => {
    const repacked = repackFreg(personMedFortroligbeskyttelse)
    expect(repacked.bostedsadresse.gateadresse).toBe('Fortrolig adresse')
    expect(repacked.bostedsadresse.poststed).toBe('UKJENT')
    expect(repacked.bostedsadresse.postnummer).toBe('9999')
    expect(repacked.bostedsadresse.adressegradering).toBe('fortrolig')
    expect(repacked.postadresse.gateadresse).toBe('Fortrolig adresse')
    expect(repacked.postadresse.poststed).toBe('UKJENT')
    expect(repacked.postadresse.postnummer).toBe('9999')
    expect(repacked.postadresse.adressegradering).toBe('fortrolig')
  })
  test('Person har adressebeskyttelse fortrolig - med option "includeFortrolig"', () => {
    const repacked = repackFreg(personMedFortroligbeskyttelse, { includeFortrolig: true })
    expect(repacked.bostedsadresse.gateadresse).toBe('Odlandsvegen 87')
    expect(repacked.bostedsadresse.poststed).toBe('RØLDAL')
    expect(repacked.bostedsadresse.postnummer).toBe('5760')
    expect(repacked.bostedsadresse.adressegradering).toBe('fortrolig')
    expect(repacked.postadresse.gateadresse).toBe('Trist Balsam, Test 262')
    expect(repacked.postadresse.poststed).toBe('SÆTRE')
    expect(repacked.postadresse.postnummer).toBe('3475')
    expect(repacked.postadresse.adressegradering).toBe('fortrolig')
  })
  test('Person har adressegradering KLIENTADRESSE - uten option "includeFortrolig"', () => {
    const repacked = repackFreg(personMedOppholdsadresseKlientadresse)
    expect(repacked.oppholdsadresse.gateadresse).toBe('Klientadresse')
    expect(repacked.oppholdsadresse.poststed).toBe('UKJENT')
    expect(repacked.oppholdsadresse.postnummer).toBe('9999')
    expect(repacked.oppholdsadresse.adressegradering).toBe('KLIENTADRESSE')
    expect(repacked.postadresse.gateadresse).toBe('Klientadresse')
    expect(repacked.postadresse.poststed).toBe('UKJENT')
    expect(repacked.postadresse.postnummer).toBe('9999')
    expect(repacked.postadresse.adressegradering).toBe('KLIENTADRESSE')
  })
  test('Person har adressegradering KLIENTADRESSE - med option "includeFortrolig" and husnummer is missing', () => {
    const repacked = repackFreg(personMedOppholdsadresseKlientadresse, { includeFortrolig: true })
    expect(repacked.oppholdsadresse.gateadresse).toBe('Suppehuegata 82')
    expect(repacked.oppholdsadresse.poststed).toBe('Plundre')
    expect(repacked.oppholdsadresse.postnummer).toBe('1664')
    expect(repacked.oppholdsadresse.adressegradering).toBe('KLIENTADRESSE')
    expect(repacked.postadresse.gateadresse).toBe('Suppehuegata 82')
    expect(repacked.postadresse.poststed).toBe('Plundre')
    expect(repacked.postadresse.postnummer).toBe('1664')
    expect(repacked.postadresse.adressegradering).toBe('KLIENTADRESSE')
  })
})

describe('Navn, adressebeskyttelse, alder, foedselsdato, foedselsEllerDNummer blir hentet som forventet når', () => {
  test('Person ikke har adressebeskyttelse', () => {
    const repacked = repackFreg(personMedBostedsdresse)
    expect(repacked.fulltnavn).toBe('Minkende Dregg')
    expect(repacked.adressebeskyttelse.length).toBe(0)
    expect(repacked.foedselsdato).toBe('1917-07-08')
    expect(repacked.foedselsEllerDNummer).toBe('08871748471')
    expect(!isNaN(repacked.alder)).toBe(true)
  })
  test('Person har addressebeskyttelse fortrolig', () => {
    const repacked = repackFreg(personMedFortroligbeskyttelse)
    expect(repacked.adressebeskyttelse[0]).toBe('fortrolig')
  })
  test('Person har addressebeskyttelse strengt fortrolig og har mellomnavn', () => {
    const repacked = repackFreg(personMedAdressebeskyttelse)
    expect(repacked.adressebeskyttelse[0]).toBe('strengtFortrolig')
    expect(repacked.fulltnavn).toBe('Ordknapp Karosseri Dromedar')
  })
})

describe('Foreldreansvar', () => {
  test('Blir hentet når includeForeldreansvar er true', () => {
    const repacked = repackFreg(personMedForeldreansvar, { includeForeldreansvar: true })
    expect(repacked.foreldreansvar.length).toBe(2)
  })
  test('Ikke blir med når includeForeldreansvar er false', () => {
    const repacked = repackFreg(personMedForeldreansvar)
    expect(repacked.foreldreansvar).toBeFalsy()
  })
  test('Tom liste blir med når includeForeldreansvar er true og person ikke har noe foreldreansvar', () => {
    const repacked = repackFreg(personMedBostedsdresse, { includeForeldreansvar: true })
    expect(repacked.foreldreansvar.length).toBe(0)
  })
})
